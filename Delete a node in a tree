import java.io.*;
import java.util.*;
class Node{
    Node left;
    Node right;
    int data;
    Node(int v){
        data=v;
        left=null;
        right=null;
    }
}
class BinaryTree{
     Node root;
    BinaryTree(){
        root=null;
    }
    public void insert(int data){
        if(root==null){
            root=new Node(data);
            return;
        }
        Queue<Node> q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            Node n=q.poll();
            if(n.left==null){
                n.left =  new Node(data);
                return;
            } 
            else if(n.right==null){
                n.right = new Node(data);
                return;
            }
            else{
            q.add(n.left);
            q.add(n.right);
            }
        }
        
    }
    public int getDeepestValue(){
        Queue<Node> q=new LinkedList<Node>();
        q.add(root);
        Node t=null;
        while(!q.isEmpty()){
             t=q.poll();
            if(t.left!=null) q.add(t.left);
            if(t.right!=null) q.add(t.right);
        }
        return t.data;
    }
    public void deleteDeep(int val){
        Queue<Node> q=new LinkedList<>();
      q.add(root);
        Node previous=null;
        Node present=null;
        while(!q.isEmpty()){
             previous= present;
            present=q.poll();
            if(present.left==null){
                previous.right=null;
                return;
            }
            else if(present.right==null){
                present.left=null;
                return;
            }
            else{
                q.add(present.left);
                q.add(present.right);
            }
        }
    }
    public void Update(int a,int val){
        Queue<Node> q=new LinkedList<>();
        q.add(root);
         while(!q.isEmpty()){
          Node nn=q.poll();
             if(nn.data==a){
                 nn.data=val;
                 return;
             }
             q.add(nn.left);
             q.add(nn.right);
         }
    }
    public void delete(int n){
        int dv=getDeepestValue();
        //System.out.println(dv);
        deleteDeep(dv);
        Update(n,dv);
        System.out.println("Successfully deleted");
    }
   public void levelOrder(){
       levelOrderUtil(root);
   }
    public void levelOrderUtil(Node root){
        if(root==null) return;
      Queue<Node> q=new LinkedList<>();
      q.add(root);
        int lcount=1;
      while(!q.isEmpty()){
          Node nn=q.poll();
          lcount--;
          System.out.print(nn.data+" ");
          if(nn.left!=null)
          q.add(nn.left);
          if(nn.right!=null)
          q.add(nn.right);
          if(lcount==0){
              lcount=q.size();
              System.out.println();
          }
      }
    }
    
}
public class Solution {
    
    
    
    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int tc=sc.nextInt();
        while(tc-->0){
            int n=sc.nextInt();
            BinaryTree bt=new BinaryTree();
            for(int i=0;i<n;i++){
                bt.insert(sc.nextInt());
            }
            //bt.inOrdern();
            System.out.println("Before Delete Operation");
            bt.levelOrder();
            int d=sc.nextInt();
            bt.delete(d);
            bt.levelOrder();
            
        }
    }
}
